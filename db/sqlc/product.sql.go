// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: createProduct :one
insert into products (name, description, cost, price, company_id)
values ($1, $2, $3, $4, $5)
returning id, name, description, cost, price, company_id, created_at, updated_at, deleted_at
`

type createProductParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Cost        sql.NullString `json:"cost"`
	Price       sql.NullString `json:"price"`
	CompanyID   int64          `json:"company_id"`
}

func (q *Queries) createProduct(ctx context.Context, arg createProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Cost,
		arg.Price,
		arg.CompanyID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Cost,
		&i.Price,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createProductCategoryLink = `-- name: createProductCategoryLink :exec
insert into products_categories_links (category_id, product_id)
values ($1, $2)
`

type createProductCategoryLinkParams struct {
	CategoryID int64 `json:"category_id"`
	ProductID  int64 `json:"product_id"`
}

func (q *Queries) createProductCategoryLink(ctx context.Context, arg createProductCategoryLinkParams) error {
	_, err := q.db.ExecContext(ctx, createProductCategoryLink, arg.CategoryID, arg.ProductID)
	return err
}

const deleteProduct = `-- name: deleteProduct :one
update products
set deleted_at = now()
where id = $1
  and deleted_at isnull
  and company_id = $2
returning id
`

type deleteProductParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) deleteProduct(ctx context.Context, arg deleteProductParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, arg.ID, arg.CompanyID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getProduct = `-- name: getProduct :one
select id, name, description, cost, price, company_id, created_at, updated_at, deleted_at
from products
where id = $1
  and deleted_at isnull
  and company_id = $2
limit 1
`

type getProductParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) getProduct(ctx context.Context, arg getProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, arg.ID, arg.CompanyID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Cost,
		&i.Price,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProducts = `-- name: getProducts :many
select id, name, description, cost, price, company_id, created_at, updated_at, deleted_at
from products
where deleted_at isnull
  and company_id = $1
order by id
`

func (q *Queries) getProducts(ctx context.Context, companyID int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Cost,
			&i.Price,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: updateProduct :one
update products
set name        = coalesce($4, name),
    description = coalesce($5, description),
    cost        = coalesce($6, cost),
    price       = coalesce($7, price),
    updated_at  = $1
where id = $2
  and deleted_at isnull
  and company_id = $3
returning id, name, description, cost, price, company_id, created_at, updated_at, deleted_at
`

type updateProductParams struct {
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	ID          int64          `json:"id"`
	CompanyID   int64          `json:"company_id"`
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Cost        sql.NullString `json:"cost"`
	Price       sql.NullString `json:"price"`
}

func (q *Queries) updateProduct(ctx context.Context, arg updateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.UpdatedAt,
		arg.ID,
		arg.CompanyID,
		arg.Name,
		arg.Description,
		arg.Cost,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Cost,
		&i.Price,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
