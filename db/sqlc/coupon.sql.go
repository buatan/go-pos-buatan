// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: coupon.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCoupon = `-- name: createCoupon :one
insert into coupons (code, description, coupon_type, amount, company_id, created_at)
values ($1, $2, $3, $4, $5, $6)
returning id, code, description, coupon_type, amount, company_id, created_at, updated_at, deleted_at
`

type createCouponParams struct {
	Code        string         `json:"code"`
	Description sql.NullString `json:"description"`
	CouponType  string         `json:"coupon_type"`
	Amount      string         `json:"amount"`
	CompanyID   int64          `json:"company_id"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) createCoupon(ctx context.Context, arg createCouponParams) (Coupon, error) {
	row := q.db.QueryRowContext(ctx, createCoupon,
		arg.Code,
		arg.Description,
		arg.CouponType,
		arg.Amount,
		arg.CompanyID,
		arg.CreatedAt,
	)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.CouponType,
		&i.Amount,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCoupon = `-- name: deleteCoupon :one
update coupons
set deleted_at = now()
where id = $1
  and deleted_at isnull
  and company_id = $2
returning id
`

type deleteCouponParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) deleteCoupon(ctx context.Context, arg deleteCouponParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteCoupon, arg.ID, arg.CompanyID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCoupon = `-- name: getCoupon :one
select id, code, description, coupon_type, amount, company_id, created_at, updated_at, deleted_at
from coupons
where id = $1
  and deleted_at isnull
  and company_id = $2
limit 1
`

type getCouponParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) getCoupon(ctx context.Context, arg getCouponParams) (Coupon, error) {
	row := q.db.QueryRowContext(ctx, getCoupon, arg.ID, arg.CompanyID)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.CouponType,
		&i.Amount,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCoupons = `-- name: getCoupons :many
select id, code, description, coupon_type, amount, company_id, created_at, updated_at, deleted_at
from coupons
where (coupon_type = $2 or $2 is null)
  and deleted_at isnull
  and company_id = $1
order by id
`

type getCouponsParams struct {
	CompanyID  int64          `json:"company_id"`
	CouponType sql.NullString `json:"coupon_type"`
}

func (q *Queries) getCoupons(ctx context.Context, arg getCouponsParams) ([]Coupon, error) {
	rows, err := q.db.QueryContext(ctx, getCoupons, arg.CompanyID, arg.CouponType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Coupon
	for rows.Next() {
		var i Coupon
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Description,
			&i.CouponType,
			&i.Amount,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoupon = `-- name: updateCoupon :one
update coupons
set code        = coalesce($4, code),
    description = coalesce($5, description),
    coupon_type = coalesce($6, coupon_type),
    amount      = coalesce($7, amount),
    updated_at  = $1
where id = $2
  and deleted_at isnull
  and company_id = $3
returning id, code, description, coupon_type, amount, company_id, created_at, updated_at, deleted_at
`

type updateCouponParams struct {
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	ID          int64          `json:"id"`
	CompanyID   int64          `json:"company_id"`
	Code        sql.NullString `json:"code"`
	Description sql.NullString `json:"description"`
	CouponType  sql.NullString `json:"coupon_type"`
	Amount      sql.NullString `json:"amount"`
}

func (q *Queries) updateCoupon(ctx context.Context, arg updateCouponParams) (Coupon, error) {
	row := q.db.QueryRowContext(ctx, updateCoupon,
		arg.UpdatedAt,
		arg.ID,
		arg.CompanyID,
		arg.Code,
		arg.Description,
		arg.CouponType,
		arg.Amount,
	)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.CouponType,
		&i.Amount,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
