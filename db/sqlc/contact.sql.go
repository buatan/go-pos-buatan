// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: contact.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createContact = `-- name: createContact :one
insert into contacts (name, phone, email, address, bank_account, contact_type, balance, company_id, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
returning id, name, phone, email, address, bank_account, contact_type, balance, company_id, created_at, updated_at, deleted_at
`

type createContactParams struct {
	Name        string         `json:"name"`
	Phone       sql.NullString `json:"phone"`
	Email       sql.NullString `json:"email"`
	Address     sql.NullString `json:"address"`
	BankAccount sql.NullString `json:"bank_account"`
	ContactType string         `json:"contact_type"`
	Balance     string         `json:"balance"`
	CompanyID   int64          `json:"company_id"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) createContact(ctx context.Context, arg createContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Address,
		arg.BankAccount,
		arg.ContactType,
		arg.Balance,
		arg.CompanyID,
		arg.CreatedAt,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.BankAccount,
		&i.ContactType,
		&i.Balance,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteContact = `-- name: deleteContact :one
update contacts
set deleted_at = now()
where id = $1
  and deleted_at isnull
  and company_id = $2
returning id
`

type deleteContactParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) deleteContact(ctx context.Context, arg deleteContactParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteContact, arg.ID, arg.CompanyID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getContact = `-- name: getContact :one
select id, name, phone, email, address, bank_account, contact_type, balance, company_id, created_at, updated_at, deleted_at
from contacts
where id = $1
  and deleted_at isnull
  and company_id = $2
`

type getContactParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) getContact(ctx context.Context, arg getContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, arg.ID, arg.CompanyID)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.BankAccount,
		&i.ContactType,
		&i.Balance,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getContacts = `-- name: getContacts :many
select id, name, phone, email, address, bank_account, contact_type, balance, company_id, created_at, updated_at, deleted_at
from contacts
where (contact_type = $3 or $3 isnull)
  and deleted_at = $1
  and company_id = $2
order by id
`

type getContactsParams struct {
	DeletedAt   sql.NullTime   `json:"deleted_at"`
	CompanyID   int64          `json:"company_id"`
	ContactType sql.NullString `json:"contact_type"`
}

func (q *Queries) getContacts(ctx context.Context, arg getContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts, arg.DeletedAt, arg.CompanyID, arg.ContactType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Address,
			&i.BankAccount,
			&i.ContactType,
			&i.Balance,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: updateContact :one
update contacts
set name         = coalesce($4, name),
    phone        = coalesce($5, phone),
    email        = coalesce($6, email),
    address      = coalesce($7, address),
    bank_account = coalesce($8, bank_account),
    contact_type = coalesce($9, contact_type),
    updated_at   = $1
where id = $2
  and deleted_at isnull
  and company_id = $3
returning id, name, phone, email, address, bank_account, contact_type, balance, company_id, created_at, updated_at, deleted_at
`

type updateContactParams struct {
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	ID          int64          `json:"id"`
	CompanyID   int64          `json:"company_id"`
	Name        sql.NullString `json:"name"`
	Phone       sql.NullString `json:"phone"`
	Email       sql.NullString `json:"email"`
	Address     sql.NullString `json:"address"`
	BankAccount sql.NullString `json:"bank_account"`
	ContactType sql.NullString `json:"contact_type"`
}

func (q *Queries) updateContact(ctx context.Context, arg updateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.UpdatedAt,
		arg.ID,
		arg.CompanyID,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Address,
		arg.BankAccount,
		arg.ContactType,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.BankAccount,
		&i.ContactType,
		&i.Balance,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
