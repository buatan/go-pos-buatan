// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: file.sql

package db

import (
	"context"
	"time"
)

const createFile = `-- name: createFile :one
insert into files (name, url, file_type, company_id, created_at)
values ($1, $2, $3, $4, $5)
returning id, name, url, file_type, company_id, created_at, updated_at, deleted_at
`

type createFileParams struct {
	Name      string    `json:"name"`
	Url       string    `json:"url"`
	FileType  string    `json:"file_type"`
	CompanyID int64     `json:"company_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) createFile(ctx context.Context, arg createFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.Name,
		arg.Url,
		arg.FileType,
		arg.CompanyID,
		arg.CreatedAt,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.FileType,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteFile = `-- name: deleteFile :one
update files
set deleted_at = now()
where id = $1
and deleted_at isnull
and company_id = $2
returning id
`

type deleteFileParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) deleteFile(ctx context.Context, arg deleteFileParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteFile, arg.ID, arg.CompanyID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getFile = `-- name: getFile :one
select id, name, url, file_type, company_id, created_at, updated_at, deleted_at
from files
where id = $1
and deleted_at isnull
and company_id = $2
`

type getFileParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) getFile(ctx context.Context, arg getFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, arg.ID, arg.CompanyID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.FileType,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFiles = `-- name: getFiles :many
select id, name, url, file_type, company_id, created_at, updated_at, deleted_at
from files
where deleted_at isnull
and company_id = $1
order by id
`

func (q *Queries) getFiles(ctx context.Context, companyID int64) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFiles, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.FileType,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
