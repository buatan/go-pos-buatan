// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: company.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCompany = `-- name: createCompany :one
insert into companies (name, address, phone, email, created_at)
values ($1, $2, $3, $4, $5)
returning id, name, address, phone, email, created_at, updated_at, deleted_at
`

type createCompanyParams struct {
	Name      string         `json:"name"`
	Address   sql.NullString `json:"address"`
	Phone     sql.NullString `json:"phone"`
	Email     sql.NullString `json:"email"`
	CreatedAt time.Time      `json:"created_at"`
}

func (q *Queries) createCompany(ctx context.Context, arg createCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Email,
		arg.CreatedAt,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createCompanyUserLink = `-- name: createCompanyUserLink :exec
insert into up_users_companies_links (user_id, company_id, role)
values ($1, $2, $3)
`

type createCompanyUserLinkParams struct {
	UserID    int64  `json:"user_id"`
	CompanyID int64  `json:"company_id"`
	Role      string `json:"role"`
}

func (q *Queries) createCompanyUserLink(ctx context.Context, arg createCompanyUserLinkParams) error {
	_, err := q.db.ExecContext(ctx, createCompanyUserLink, arg.UserID, arg.CompanyID, arg.Role)
	return err
}

const deleteCompany = `-- name: deleteCompany :one
update companies
set deleted_at = now()
where id = $1
  and deleted_at isnull
returning id
`

func (q *Queries) deleteCompany(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteCompany, id)
	err := row.Scan(&id)
	return id, err
}

const getCompanies = `-- name: getCompanies :many
select id, name, address, phone, email, created_at, updated_at, deleted_at
from companies
where deleted_at isnull
order by name
`

func (q *Queries) getCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: getCompany :one
select id, name, address, phone, email, created_at, updated_at, deleted_at
from companies
where id = $1
  and deleted_at isnull
limit 1
`

func (q *Queries) getCompany(ctx context.Context, id int64) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCompany = `-- name: updateCompany :one
update companies
set name       = coalesce($3, name),
    address    = coalesce($4, address),
    phone      = coalesce($5, phone),
    email      = coalesce($6, email),
    updated_at = $1
where id = $2
  and deleted_at isnull
returning id, name, address, phone, email, created_at, updated_at, deleted_at
`

type updateCompanyParams struct {
	UpdatedAt sql.NullTime   `json:"updated_at"`
	ID        int64          `json:"id"`
	Name      sql.NullString `json:"name"`
	Address   sql.NullString `json:"address"`
	Phone     sql.NullString `json:"phone"`
	Email     sql.NullString `json:"email"`
}

func (q *Queries) updateCompany(ctx context.Context, arg updateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.UpdatedAt,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Email,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
